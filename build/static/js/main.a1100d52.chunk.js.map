{"version":3,"sources":["components/Display.js","components/Input.js","components/Form.js","components/Search.js","services/personServ.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Display","displayFiltered","Input","value","handler","label","onChange","Form","handleSubmit","newName","handleInput","newNumber","handleNumber","onSubmit","type","Search","handleSearch","baseURL","axios","get","then","response","data","anObj","post","id","delete","put","Notification","message","includes","className","App","useEffect","console","log","personServ","responseData","setPersons","useState","persons","setNewName","setNewNumber","filterSearch","setFilterSearch","valueSearch","setValueSearch","errorMessage","setErrorMessage","successMessage","setSuccessMessage","map","entry","key","name","number","onClick","handleDelete","result","window","confirm","entry_soon_deleted","find","aPerson","setTimeout","filter","event","target","donCheet","person","toLowerCase","preventDefault","phoneUpdate","isDuplicate","confirmPhone","updatedObj","catch","error","alert","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1100d52.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Display = ({ displayFiltered }) => {\n  return <ul>{displayFiltered}</ul>;\n};\n\nexport default Display;\n","import React from \"react\";\n\nconst Input = ({ value, handler, label }) => {\n  return (\n    <p>\n      {label}: <input value={value} onChange={handler} />\n    </p>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport Input from \"./Input\";\n\nconst Form = ({\n  handleSubmit,\n  newName,\n  handleInput,\n  newNumber,\n  handleNumber,\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <Input value={newName} handler={handleInput} label={\"name\"} />\n        <Input value={newNumber} handler={handleNumber} label={\"number\"} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\n\nconst Search = ({ handleSearch }) => {\n  return (\n    <span>\n      Find\n      <input onChange={handleSearch} />\n    </span>\n  );\n};\n\nexport default Search;\n","import axios from \"axios\";\n\nconst baseURL = \"http://localhost:3001/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseURL);\n  return request.then((response) => response.data);\n};\n\nconst add = (anObj) => {\n  const request = axios.post(baseURL, anObj);\n  return request.then((response) => response.data);\n};\n\nconst deleteEntry = (id) => {\n  const request = axios.delete(`${baseURL}/${id}`);\n  return request;\n};\n\nconst update = (id, anObj) => {\n  const request = axios.put(`${baseURL}/${id}`, anObj);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, add, deleteEntry, update };\n","import React from \"react\";\n\nconst Notification = ({ message }) => {\n  if (message === \"\") {\n    return <></>;\n  } else if (message === null) {\n    return null;\n  } else if (message.includes(\"not\")) {\n    return <p className=\"fail\">{message}</p>;\n  } else {\n    return <p className=\"success\">{message}</p>;\n  }\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport Display from \"./components/Display\";\nimport Form from \"./components/Form\";\nimport Search from \"./components/Search\";\nimport personServ from \"./services/personServ\";\nimport \"./index.css\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  useEffect(() => {\n    console.log(\"effect\");\n    personServ.getAll().then((responseData) => {\n      console.log(\"promised fulfilled\");\n      setPersons(responseData);\n    });\n  }, []);\n\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filterSearch, setFilterSearch] = useState([...persons]);\n  const [valueSearch, setValueSearch] = useState(\"\");\n  //notif\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    let phoneUpdate = false;\n    let isDuplicate = false;\n    let confirmPhone = false;\n\n    for (const person of persons) {\n      if (newName === person.name && person.number !== newNumber) {\n        phoneUpdate = true;\n        confirmPhone = window.confirm(\n          `${person.name} already exist in the phonebook. Change its phone number?`\n        );\n      } else if (newName === person.name) {\n        isDuplicate = true;\n      }\n    }\n\n    if (phoneUpdate) {\n      if (confirmPhone) {\n        const anObj = persons.find((person) => person.name === newName);\n        const updatedObj = {\n          ...anObj,\n          number: newNumber,\n        };\n        personServ\n          .update(anObj.id, updatedObj)\n          .then((data) => {\n            setPersons(\n              persons.map((aPerson) => {\n                return aPerson.name === anObj.name ? updatedObj : aPerson;\n              })\n            );\n          })\n          .catch((error) => {\n            setErrorMessage(`${anObj.name} is not part of the server!`);\n            setTimeout(() => {\n              setErrorMessage(null);\n            }, 3000);\n          });\n      } else {\n        console.log(\"No changes will be made to the phone number\");\n      }\n    } else if (isDuplicate) {\n      alert(`${newName} has already been added`);\n      console.log(\"Duplicate entry\");\n    } else {\n      const newEntry = { name: newName, number: newNumber };\n\n      personServ\n        .add(newEntry)\n        .then((responseData) => {\n          setPersons(persons.concat(responseData));\n          setSuccessMessage(`${responseData.name} added`);\n          setTimeout(() => {\n            setSuccessMessage(null);\n          }, 3000);\n        })\n        .catch((error) => console.log(\"error: \", error));\n\n      setNewName(\"\");\n      setNewNumber(\"\");\n    }\n  };\n\n  const handleInput = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumber = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearch = (event) => {\n    setValueSearch(event.target.value);\n    const donCheet = persons.filter((person) => {\n      return person.name\n        .toLowerCase()\n        .includes(event.target.value.toLowerCase());\n    });\n\n    setFilterSearch(donCheet);\n  };\n\n  const entriesShow = valueSearch === \"\" ? persons : filterSearch;\n\n  const displayFiltered = entriesShow.map((entry) => {\n    return (\n      <li className=\"pudding\" key={entry.id}>\n        {entry.name} {entry.number}\n        <button type=\"click\" onClick={() => handleDelete(entry.id)}>\n          remove\n        </button>\n      </li>\n    );\n  });\n\n  const handleDelete = (id) => {\n    const result = window.confirm(\n      \"Are you sure you wish to delete your work of art?\"\n    );\n\n    const entry_soon_deleted = persons.find((aPerson) => aPerson.id === id);\n\n    if (result) {\n      personServ.deleteEntry(id).then((response) => {\n        console.log(\"success: \", response);\n        setSuccessMessage(`${entry_soon_deleted.name} deleted`);\n        setTimeout(() => {\n          setSuccessMessage(null);\n        }, 3000);\n        setPersons(\n          persons.filter((aPerson) => {\n            return aPerson.id !== id;\n          })\n        );\n      });\n    } else {\n      console.log(\"no changes made\");\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={successMessage} />\n      <Notification message={errorMessage} />\n\n      <Search handleSearch={handleSearch} />\n\n      <h2>New entry</h2>\n      <Form\n        handleSubmit={handleSubmit}\n        newName={newName}\n        handleInput={handleInput}\n        newNumber={newNumber}\n        handleNumber={handleNumber}\n      />\n\n      <h2>Numbers</h2>\n      <Display displayFiltered={displayFiltered} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}